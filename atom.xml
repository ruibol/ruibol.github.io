<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reidorz</title>
  
  <subtitle>Programming is fun!</subtitle>
  <link href="https://ruibol.github.io/atom.xml" rel="self"/>
  
  <link href="https://ruibol.github.io/"/>
  <updated>2021-05-12T08:53:09.792Z</updated>
  <id>https://ruibol.github.io/</id>
  
  <author>
    <name>ruibol</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数学】学习记录</title>
    <link href="https://ruibol.github.io/2021/05/12/math-notes/"/>
    <id>https://ruibol.github.io/2021/05/12/math-notes/</id>
    <published>2021-05-12T02:06:34.000Z</published>
    <updated>2021-05-12T08:53:09.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h1><p>在数学中，由若干个单项式相加组成的代数式叫做多项式（若有减法：减一个数等于加上它的相反数）。多项式中的每个单项式叫做多项式的项，这些单项式中的最高项次数，就是这个多项式的次数。其中多项式中不含字母的项叫做常数项。</p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p>由m × n个数aij排成的m行n列的数表称为m行n列的矩阵，简称m × n矩阵。记作：</p><p><img src="/.io//mxn-matrix.png"></p><ul><li>这m×n 个数称为矩阵A的元素，简称为元，数aij位于矩阵A的第i行第j列，称为矩阵A的(i,j)元，以数 aij为(i,j)元的矩阵可记为(aij)或(aij)m × n，m×n矩阵A也记作Amn。</li><li>元素是实数的矩阵称为实矩阵，元素是复数的矩阵称为复矩阵。而行数与列数都等于n的矩阵称为n阶矩阵或n阶方阵。</li></ul>]]></content>
    
    
    <summary type="html">记录学习过程中遇到的数学知识，持续更新</summary>
    
    
    
    <category term="学习笔记" scheme="https://ruibol.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="算法" scheme="https://ruibol.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学" scheme="https://ruibol.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】笔记整合+源码+Java实现</title>
    <link href="https://ruibol.github.io/2021/05/11/data-structure-notes/"/>
    <id>https://ruibol.github.io/2021/05/11/data-structure-notes/</id>
    <published>2021-05-11T08:02:24.000Z</published>
    <updated>2021-05-12T02:10:06.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="施工中…"><a href="#施工中…" class="headerlink" title="施工中…"></a>施工中…</h3>]]></content>
    
    
    <summary type="html">浙江大学《数据结构》by陈越&amp;何钦铭+所有代码的Java实现&lt;br&gt;源码：https://github.com/ruibol/DataStructure&lt;br&gt;慕课：https://www.icourse163.org/learn/ZJU-93001?tid=1462787444#/learn/content</summary>
    
    
    
    <category term="学习笔记" scheme="https://ruibol.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据结构" scheme="https://ruibol.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://ruibol.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://ruibol.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【JavaSE】笔记整合+源码</title>
    <link href="https://ruibol.github.io/2021/05/08/javase-notes/"/>
    <id>https://ruibol.github.io/2021/05/08/javase-notes/</id>
    <published>2021-05-08T08:01:55.000Z</published>
    <updated>2021-05-11T11:03:01.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ol><li>自定义线程类 extends Thread</li><li>重写run()方法，编写线程执行体</li><li>创建线程对象，调用start()方法启动线程：<code>子类对象.start()</code></li></ol><ul><li><strong>线程不一定立即执行，由CPU安排调度</strong></li><li><strong>缺点：OOP单继承局限性</strong> </li></ul><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol><li>自定义Runnable类 implements Runnable</li><li>重写run()方法，编写线程执行体</li><li>创建线程对象，调用start()方法启动线程：<code>传入目标对象+Thread对象.start()</code></li></ol><ul><li><strong>推荐使用Runnable对象，方便同一个对象被多个线程使用。一份资源，多个代理</strong></li></ul><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><ol><li><strong>实现Callable接口</strong>，需要返回值类型 implements Callable<Boolean></Boolean></li><li><strong>重写call()方法</strong>，需要在main()函数抛出异常</li><li><strong>创建目标对象</strong></li><li><strong>创建执行服务</strong> <code>ExecutorService ser = Executors.newFixedThreadPool(3);</code></li><li><strong>提交执行</strong> <code>Future&lt;Boolean&gt; r1 = ser.submit(t1);</code></li><li><strong>获取结果</strong> <code>boolean rs1 = r1.get();</code></li><li><strong>关闭服务</strong> <code>ser.shutdownNow();</code></li></ol><ul><li>Callable接口不常用，了解即可</li><li><strong>优点：1.可以定义返回值； 2.可以抛出异常</strong></li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li><p>任何接口，如果<strong>只包含唯一一个抽象方法</strong>，那么它就是函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于函数式接口，可以通过lambda表达式来创建该接口的对象</p></li><li><p><strong>用lambda表达式的好处： 1.避免匿名内部类定义过多；2.简洁代码</strong></p></li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="三个内置注解"><a href="#三个内置注解" class="headerlink" title="三个内置注解"></a>三个内置注解</h2><ul><li><code>@Override</code></li><li><code>@Deprecated</code></li><li><code>@SuppressWarnings(&quot;all&quot;)</code></li></ul><h2 id="四个元注解"><a href="#四个元注解" class="headerlink" title="四个元注解"></a>四个元注解</h2><ul><li><code>Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)</code><br>Target表示我们的注解可以用在哪些地方</li><li><code>@Retention(value = RetentionPolicy.RUNTIME)</code><br>Retention表示我们的注解在什么地方有效（runtime&gt;class&gt;sources 一般都用runtime）</li><li><code>@Documented</code><br>Documented表示是否将我们的注解生成在JAVAdoc中</li><li><code>@Inherited</code><br>Inherited表示子类可以继承父类的注解</li></ul><p><strong>四个元注解，重点是Target和Retention，基本是必写</strong></p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>用@interface自定义注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">//如果只有一个参数，建议用value命名</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注解的参数：<strong>参数类型 参数名();</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">//-1代表不存在</span></span><br><span class="line">String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;monash&quot;</span>, <span class="string">&quot;utas&quot;</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">JavaSE学习笔记整合：多线程+注解+反射+网络编程+JUC+JVM&lt;br&gt;源码：https://github.com/ruibol/JavaSE</summary>
    
    
    
    <category term="学习笔记" scheme="https://ruibol.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://ruibol.github.io/tags/Java/"/>
    
    <category term="JavaSE" scheme="https://ruibol.github.io/tags/JavaSE/"/>
    
    <category term="多线程" scheme="https://ruibol.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="注解" scheme="https://ruibol.github.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
    <category term="反射" scheme="https://ruibol.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
    <category term="网络编程" scheme="https://ruibol.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JUC" scheme="https://ruibol.github.io/tags/JUC/"/>
    
    <category term="JVM" scheme="https://ruibol.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>【IDE】快捷操作记录</title>
    <link href="https://ruibol.github.io/2021/05/07/ide-shortcuts/"/>
    <id>https://ruibol.github.io/2021/05/07/ide-shortcuts/</id>
    <published>2021-05-07T05:14:22.000Z</published>
    <updated>2021-05-11T09:13:31.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><ol><li>psvm - public static void main(Stringp[] args)</li><li>sout - System.out.println()</li><li>CTRL+SHIFT+ENTER 在当前行末尾生成分号</li><li>CTRL+]以及CTRL+[ 快速定位括号首末端</li><li><strong>双击SHIFT 快速搜索</strong></li><li>CTRL+ALT+SHIFT+N 快速寻找Controller</li><li>CTRL+ALT+L 排版代码</li><li>CTRL+/ 注释代码 Ctrl+Shift+/注释代码块</li><li>CTRL+D 在下一行复制该行代码</li><li>快速生成代码：<ol><li>定义局部变量 “java”.var</li><li>定义成员变量 “java”.field</li><li>格式化字符串 “name=%s”.format</li><li>判断非空 var.nn(.notnull) 判断空 var.null</li><li>取反判断 success.not.if</li><li>遍历集合 List list = Arrays.asList(“A”, “B”);  list.for / list.fori / list.forr</li><li>返回值 var.return</li><li>生成同步锁 obj.synchronized</li><li>生成lambda以及optional sout(“java”).lambda.val;  runnable.opt</li><li>for循环 100.fori</li><li><strong>生成构造方法 alt+insert</strong></li></ol></li><li><strong>跳到行首/尾 单击Home/End键</strong></li></ol>]]></content>
    
    
    <summary type="html">记录学习中遇到的各种IDE快捷操作，持续更新</summary>
    
    
    
    <category term="学习笔记" scheme="https://ruibol.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Tools" scheme="https://ruibol.github.io/tags/Tools/"/>
    
    <category term="IDEA" scheme="https://ruibol.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>博客更新日志</title>
    <link href="https://ruibol.github.io/2021/05/07/blog-updates/"/>
    <id>https://ruibol.github.io/2021/05/07/blog-updates/</id>
    <published>2021-05-07T04:30:36.000Z</published>
    <updated>2021-05-11T10:11:06.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ruibol-github-io-更新日志"><a href="#ruibol-github-io-更新日志" class="headerlink" title="ruibol.github.io 更新日志"></a>ruibol.github.io 更新日志</h2><p><strong>2021年5月11日更新1.1.2</strong></p><ol><li>修复Markdown目录TOC子目录不显示问题，<font color="red"><strong>感谢<a href="https://blog.csdn.net/wugenqiang/article/details/88609066">@WuGenQiang</a></strong></font></li></ol><p><strong>2021年5月9日更新1.1.1</strong></p><ol><li>修复Markdown目录TOC跳转失效问题，<font color="red"><strong>感谢<a href="https://www.cnblogs.com/Createsequence/p/14150758.html">@Createsequence</a></strong></font></li><li>修复代码块不显示高亮问题</li></ol><p><strong>2021年5月8日更新1.1.0</strong></p><ol><li>修复日志页面NotFound问题</li><li>优化文章分类</li><li>新增RSS功能</li><li>新增右上角Github角标</li><li>新增本地搜索功能</li><li>新增Gitalk评论功能</li><li>添加网页背景图片</li><li>更换网站站标</li></ol><p><strong>2021年5月7日发布1.0.0</strong></p><ol><li>ruibol.github.io上线</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ruibol-github-io-更新日志&quot;&gt;&lt;a href=&quot;#ruibol-github-io-更新日志&quot; class=&quot;headerlink&quot; title=&quot;ruibol.github.io 更新日志&quot;&gt;&lt;/a&gt;ruibol.github.io 更新日志&lt;/</summary>
      
    
    
    
    <category term="博客站务" scheme="https://ruibol.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AB%99%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="https://ruibol.github.io/2021/05/07/welcome-to-my-blog/"/>
    <id>https://ruibol.github.io/2021/05/07/welcome-to-my-blog/</id>
    <published>2021-05-07T04:25:38.000Z</published>
    <updated>2021-05-09T04:10:30.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本博客计划将所有文章分为五类以便查阅"><a href="#本博客计划将所有文章分为五类以便查阅" class="headerlink" title="本博客计划将所有文章分为五类以便查阅"></a>本博客计划将所有文章分为五类以便查阅</h2><table><thead><tr><th align="center">分类</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">学习笔记</td><td align="center">知识点和易错点</td></tr><tr><td align="center">项目总结</td><td align="center">项目的设计思路、实现过程以及难点</td></tr><tr><td align="center">解决方案</td><td align="center">对某个特定问题的解决方法</td></tr><tr><td align="center">博客站务</td><td align="center">该博客的搭建、部署、更新以及公告</td></tr><tr><td align="center">日志随笔</td><td align="center">除以上类别外的所有文章</td></tr></tbody></table><p><strong>某些文章未开启评论功能，如有需要可在“关于”页面留言，或通过网页版左侧邮箱联系我</strong></p><p><font color="red"><strong>感谢<a href="https://yxchangingself.xyz/">@憧憬少</a>提供的博客分类思路</strong></font></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本博客计划将所有文章分为五类以便查阅&quot;&gt;&lt;a href=&quot;#本博客计划将所有文章分为五类以便查阅&quot; class=&quot;headerlink&quot; title=&quot;本博客计划将所有文章分为五类以便查阅&quot;&gt;&lt;/a&gt;本博客计划将所有文章分为五类以便查阅&lt;/h2&gt;&lt;table&gt;
&lt;</summary>
      
    
    
    
    <category term="博客站务" scheme="https://ruibol.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AB%99%E5%8A%A1/"/>
    
    
  </entry>
  
</feed>
